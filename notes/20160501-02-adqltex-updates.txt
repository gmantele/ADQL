#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2016, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#  
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

# -----------------------------------------------------
# Boolean Type

    Boolean text

        Table 3 - add BOOLEAN

            A boolean literals are expressed using one or other of the boolean keywords,
            TRUE, FALSE or true, false.

            Boolean literals are defined in BNF as follows :

                <boolean_literal>  ::= TRUE | FALSE | true | false

            Boolean literals are NOT case sensitive.

        Text from original proposal

            "If the backend database contains columns of type boolean, a comparison of those
            against the literal strings True and False must be true and false when the column
            is true and false, respectively."

                Does this say anything more than the literal True is true and the
                literal False is false ?
            
            "The comparison to other literals is undefined by this specification."
            
                Excludes comparison with 1 and 0 ?
                
            "Clients should note that the strings have to be entered exactly as given here,
            without changing case, adding whitespace, or any other modification."

                Better to be leniant where possible.
                Check with list.

        Text from SQL-2011

            "The data type boolean comprises the distinct truth values True and False.
            Unless prohibited by a NOT NULL constraint, the boolean data type also
            supports the truth value Unknown as the null value. This specification
            does not make a distinction between the null value of the boolean data
            type and the truth value Unknown that is the result of an SQL <predicate>,
            <search condition>, or <boolean value expression>; they may be used
            interchangeably to mean exactly the same thing."


            "All boolean values and SQL truth values are comparable and all are
            assignable to a site of type boolean. The value True is greater than the
            value False, and any comparison involving the null value or an Unknown truth
            value will return an Unknown result. The values True and False may be assigned
            to any site having a boolean data type; assignment of Unknown, or the null
            value, is subject to the nullability characteristic of the target."
                
        ** Need to test boolean literals on Cosmpoterix.
        ** Need to test boolean unknown on Cosmpoterix.

        ** Need to discuss unknown on mailing list.

        ** Do we want to be able to do this .. (not in current BNF)
           SELECT (ra BETWEEN 10 AND 20) AS test FROM alpha_source ;

        ** Good enough !!

    Boolean BNF

        <value_expression> ::=
            <numeric_value_expression>
          | <string_value_expression>
    +     | <boolean_value_expression>
          | <geometry_value_expression>

    +   <boolean_value_expression> ::= 
            <boolean_literal>
          | <boolean_function>
          | <user_defined_function>

    +   <boolean_literal> ::= TRUE | FALSE | true | false

    +   <boolean_function> ::= # Placeholder

# -----------------------------------------------------
# Hexadecimal literals

    Text needs work ..

    Hexadecimal text

        2.1.3.2.x Hexadecimal

            Hexadecimal literals are only valid for integer data types, SMALLINT, INTEGER and BIGINT.

            Hexadecimal literals are expressed using the 'C' style notation, e.g. 0xFF.

            Hexadecimal literals are defined in BNF as follows :

                <unsigned_hexadecimal> ::= 0x<hex_digit>...

                hex_digit ::= <dec_digit> | a | b | c | d | e | f | A | B | C | D | E | F

            Hexadecimal literals are NOT case sensitive.

    Numeric BNF (updated)

            <signed_numeric_literal> ::= [<sign>] <unsigned_numeric_literal>

            <unsigned_numeric_literal> ::= 
                <exact_numeric_literal>
              | <approximate_numeric_literal>
              
            <exact_numeric_literal> ::=
                <unsigned_decimal> [<period> [<unsigned_decimal>]]
              | <period><unsigned_decimal>
              | <unsigned_decimal>
              | <unsigned_hexadecimal>

            <approximate_numeric_literal> ::= <mantissa> E <exponent>

            <mantissa> ::= <exact_numeric_literal>

            <exponent> ::= <signed_decimal>

            <signed_decimal> ::= [<sign>] <unsigned_decimal>

            <unsigned_decimal> ::= <dec_digit>...

            <dec_digit> ::= 0 | 1  | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
            
            <sign> ::= <plus_sign> | <minus_sign>


    Hexadecimal BNF

            <unsigned_hexadecimal> ::= 0x<hex_digit>...

            hex_digit ::= <dec_digit> | a | b | c | d | e | f | A | B | C | D | E | F

# -----------------------------------------------------
# Bitwise operators

    BNF needs work

    Bitwise operators
    
        Remove the functions

            An ADQL service implementation MAY include support for the following
            optional bitwise operators:

            * BIT_NOT ~ x
            * BIT_AND x & y
            * BIT_OR  x | y
            * BIT_XOR x ^ y <-- Note potential conflict with PostgreSQL exponentiation.

        Add
            "The the bitwise operations are only valid for integer numeric values,
            SMALLINT, INTEGER or BIGINT. If the operands are not integer values,
            then the result of the bitwise AND operation is undefined.
            
        Del
            "The function and operator form of each bitwise operation are treated as
            a pair. If an ADQL implementation declares support for one of the bitwise
            operations, it MUST support both the function and operator form of the
            bitwise operation."

        Update the operators to match.

            ....

    Bitwise BNF

        <bitwise_expression> ::=
            <bitwise_not> <integer_expression>
          | <integer_expression> <bitwise_and> <integer_expression>
          | <integer_expression> <bitwise_or>  <integer_expression>
          | <integer_expression> <bitwise_xor> <integer_expression>

        <integer_expression> ::= <numeric_expression> # integer return type only

        # is this the right place for it ?
        <numeric_value_expression> ::=
            <term>
          | <bitwise_expression>
          | <numeric_value_expression> <plus_sign> <term>
          | <numeric_value_expression> <minus_sign> <term>

# -----------------------------------------------------
# Hierarchical queries

    WITH feature

        WITH
        Language feature
        type: ivo://ivoa.net/std/TAPRegExt#features-adql-hierarchical
        name: WITH

            Common table expressions define temporary views that exist only for the duration of the query.

            Ordinary common table expressions help to make queries easier to understand by factoring
            subqueries out of the main SQL statement.

                WITH alpha_subset AS
                    (
                    SELECT
                        *
                    FROM
                        alpha_source
                    WHERE
                        id % 10 = 0
                    )
                SELECT
                    *
                FROM
                    alpha_subset
                WHERE
                    ra BETWEEN 10 AND 20
           
            Recursive common table expressions provide the ability to iterate recursive queries of trees and graphs. 

            We have not accepted RECURSIVE as an option (yet).

            Do we want to include RECURSIVE CTEs ?

        Need to test WITH on Cosmpoterix.

    WITH BFN

            <query_expression> ::=
        becomes
            <select_query> ::=

        add

            <query_expression> :=
                WITH <with_query> [, ...]
                <select_query>

            <with_query> :=
                <query_name>
                [ (<column_name> [,...]) ] AS (<select_query>)

            <query_name> ::= <identifier>

# -----------------------------------------------------
# OFFSET

    OFFSET text

        OFFSET
        Language feature
        type: ivo://ivoa.net/std/TAPRegExt#features-adql-offset
        name: OFFSET

            Text based on SQL 2011


    OFFSET BNF

        <table_expression> ::=
            <from_clause>
          [ <where_clause> ]
          [ <group_by_clause> ]
          [ <having_clause> ]
          [ <order_by_clause> ]
    +     [ <offset_clause> ]

    +   <offset_clause> ::= [OFFSET <unsigned_integer>]

# -----------------------------------------------------
# CAST

    CAST feature

        CAST
        type: ivo://ivoa.net/std/TAPRegExt#features-adql-type
        name: CAST

            Feature name is wrong
        -   name: IN_UNIT
        +   name: CAST


    CAST BNF

        <numeric_value_function> ::=
            <cast_function>
          | <trig_function>
          | <math_function>        
          | ....
          
        <cast_function> ::= 
          | CAST(<numeric_value_expression> AS <numeric_type>) 

        <numeric_type> ::= SHORTINT | INTEGER | BIGINT | REAL | DOUBLE


# -----------------------------------------------------
# UNION

    Check BNF is correct

        <non_join_query_expression> ::=
            <non_join_query_term>
          | <query_expression> UNION [ ALL ] <query_term>
          | <query_expression> EXCEPT [ ALL ] <query_term>

# -----------------------------------------------------
# INTERSECT

    Check BNF is correct

        <non_join_query_primary> ::=
            <query_specification>
          | <left_paren> <non_join_query_expression> <right_paren>

        <non_join_query_term> ::=
            <non_join_query_primary>
          | <query_term> INTERSECT [ ALL ] <query_expression>

# -----------------------------------------------------
# DISTANCE

    DISTANCE text


    DISTANCE BNF


# -----------------------------------------------------
# Syntax checks

    http://mail.ivoa.net/pipermail/dal/2015-July/007172.html

        *Note*: The usage of {} in the EBNF in this specification follows the
        usage in SQL92, i.e., it is used for grouping.  It is *not* used as
        a zero-or-more operator as frequently done in other kinds of EBNF.

# -----------------------------------------------------
# Online BNF

    Deprecate or update
    http://wiki.ivoa.net/internal/IVOA/IvoaVOQL/adql-bnf-v2.0.html

# -----------------------------------------------------
# TapNotes 2014

    http://wiki.ivoa.net/twiki/bin/view/IVOA/TapNotes20140718
